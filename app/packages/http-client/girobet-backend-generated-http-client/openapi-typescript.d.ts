/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ws/access-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Issue WebSocket Access Token
         * @description This endpoint is used to generate authentication tokens (access tokens) for WebSocket connections in our system.
         *
         *     ## Access Token Generation
         *
         *     1. Send a POST request to the access token issuer endpoint.
         *     2. The endpoint will return an access token.
         *
         *     ## Access Token Properties
         *
         *     - Access tokens are short-lived tokens, valid for 60 seconds from the time of generation.
         *     - Each access token, once used, is tied to a specific websocket connection and is immediately invalidated.
         *
         *     ## Usage
         *
         *     - Use the generated access token when establishing a WebSocket connection.
         *     - For detailed information on how to use the access token in a WebSocket connection, refer to the documentation found [here](#tag/websocket/GET/ws/connect).
         *
         *     ## Important Notes
         *
         *     - Always generate a new access token before attempting to log in to the user event stream.
         *     - Ensure your client handles access token expiration and reconnection scenarios.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AccessTokenTokenResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ws/connect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Establish WebSocket Connection
         * @description This route is the entry point for WebSocket connections in our system.
         *
         *     ## Connection Process
         *
         *     1. Connect to this endpoint using the WebSocket protocol.
         *     2. Once connected, send a login message with your access token:
         *
         *        ```json
         *        {
         *          "type": "user_login",
         *          "data": "<access-token>"
         *        }
         *        ```
         *
         *     ## Example (JavaScript)
         *
         *     ```javascript
         *     const socket = new WebSocket("wss://your-domain.com/ws/connect");
         *
         *     // After connection is established, send login message
         *     socket.onopen = () => {
         *       const loginMessage = {
         *         type: "user_login",
         *         data: "your-access-token"
         *       };
         *       socket.send(JSON.stringify(loginMessage));
         *     };
         *     ```
         *
         *     ## Message Format
         *
         *     All WebSocket messages follow a JSON format. The message structure for client events matches the request body specifications in this OpenAPI documentation, while server events follow the HTTP response specifications.
         *
         *     ### Client Events (Sending)
         *     Messages sent from the client should follow this format:
         *     ```json
         *     {
         *       "type": "event_name",
         *       "data": {}  // Data structure as specified in OpenAPI request bodies
         *     }
         *     ```
         *
         *     ### Server Events (Receiving)
         *     Messages received from the server will follow this format:
         *     ```json
         *     {
         *       "type": "event_name",
         *       "data": {}  // Data structure as specified in OpenAPI responses
         *     }
         *     ```
         *
         *     ## Important Notes
         *
         *     - Access tokens are valid for 60 seconds.
         *     - Ensure your client can handle reconnection if the access token expires.
         *     - The server will emit an error event if authentication fails.
         *     - After a successful login, you'll be subscribed to your respective channel.
         *
         *     For detailed information on access token generation and management, refer to the main WebSocket authentication documentation found [here](#tag/websocket/POST/ws/access-token).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["WebsocketClientEvent"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WebsocketServerEvent"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/whoami": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Whoami
         * @description The whoami endpoint returns some basic information about the currently logged in user.
         *     This is primarily used for verifying that the user is logged in.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WhoamiResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/fasttrack-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fasttrack token
         * @description This endpoint returns a JWT token, to be used by the Fasttrack frontend SDK for user verification
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetFasttrackTokenResponseBody"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Authenticates a user and sets the session cookie
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description User logout, which will forcefully expire the current session cookie.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Password reset request
         * @description This endpoint will take a user email and send out a password reset email to the user.
         *     The email will contain a link that the user can click on to reset their password. The link will be valid for 60 minutes.
         *     Note that this endpoint will always return a 200 status code, even if the email does not exist in the database.
         *     This is to prevent attackers from using this endpoint to determine if an email exists in the database.
         *     The endpoint will also always take the same amount of time to respond, regardless of whether the email exists in the database or not.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["InitializePasswordResetRequest"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Password reset
         * @description This endpoint takes a password reset token and the newly chosen password from the user.
         *     The token is sent to the user's email when they request a password reset.
         *     If the token is valid, the user's password will be updated to the new password.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["FinalizePasswordResetRequest"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/signup/flow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Signup Flow
         * @description Create a new signup flow that can be incrementally patched and the submitted for completion.
         *     This endpoint requires the `CF-IPCountry` header to be set and to be a valid jurisdiction.
         *     This header is normally set by Cloudflare and is used to determine the jurisdiction of the user,
         *     buy you may also set it manually during development.
         *     Note that you may need to configure the CORS settings to allow the `CF-IPCountry` header to be sent.
         *
         *     The ID returned by the signup flow can be stored in the frontend URL or other storage
         *     to recover the signup flow if the user reloads the page or does other destructive actions.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateSignupFlowResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/signup/flow/{flow_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Signup Flow
         * @description Get the specified signup flow and all the fields that have been added to it.
         *     Use this for recovering form data if the user reloads the page or does other destructive actions.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the signup flow to retrieve. */
                    flow_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SignupFlowResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Submit Signup Flow
         * @description Submit the specified signup flow and create the user entry.
         *     This can fail if certain validation of fields and jurisdiction dependent information is unsuccessful.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the signup flow to retrieve. */
                    flow_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Signup Flow
         * @description
         *     Patch the specified signup flow with additional information.
         *
         *     Example request body for brazilian users:
         *     ```
         *      {
         *     	"first_name": "John",
         *     	"last_name": "Doe",
         *     	"email": "john@doe.com",
         *     	"password": "test",
         *     	"CPF": "549.448.010-09",
         *     	"signup_params": {           // optional
         *     		"utm_source": "google",
         *     		"utm_medium": "cpc",
         *     		"utm_campaign": "test",
         *     		"utm_term": "test",
         *     		"utm_content": "test",
         *     		"utm_referrer": "test",
         *     		"utm_adgroup": "test",
         *     		"utm_ad": "test",
         *     		"utm_creative": "test",
         *     		"utm_matchtype": "test",
         *     		"utm_network": "test",
         *     		"utm_device": "test"
         *     	}
         *     }
         *     ```
         *
         *     #### Testing CPFs that you can use to create a user
         *
         *     - 549.448.010-09
         *     - 653.358.910-50
         *     - 715.176.900-80
         *     - 395.677.760-32
         *     - 993.093.100-73
         *
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the signup flow to retrieve. */
                    flow_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PatchSignupFlowRequest"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/payment/deposit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Deposit Flow
         * @description Create a new deposit flow.
         *         This flow will be active as long as we don't receive a
         *         confirmation from our payment providers, that a deposit has been completed.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PaymentTransactionRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateDepositFlowResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Withdrawal Flow
         * @description Create a withdrawal flow.
         *         This flow will be active as long as we don't receive a confirmation from our payment provider,
         *         that they have successfully withdrawn the desired amount into the user's bank account.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PaymentTransactionRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateWithdrawalFlowResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Payment Flows
         * @description List all payment flows for the currently logged in user.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The payment type to filter the payment flows by. If not set, all payment
                     *      types will be included. */
                    payment_type?: components["schemas"]["PaymentType"] | null;
                    /** @description The wallet ID to filter the payment flows by. If not set, all wallets of
                     *      the user will be included. */
                    wallet_id?: components["schemas"]["WalletId"] | null;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatorResponse_for_PaymentFlowResponse_and_ListPaymentFlowsQuery_and_int64"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/limits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Payment Limits
         * @description Get the payment limits for the currently logged in user.
         */
        get: {
            parameters: {
                query: {
                    /** @description The currency to get the payment limits for. */
                    currency: components["schemas"]["Currency"];
                    /** @description The payment method to get the payment limits for. */
                    payment_method_id: components["schemas"]["PaymentMethodId"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentLimitsResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Payment Methods
         * @description Get all payment methods that can be used by the user for the given currency.
         */
        get: {
            parameters: {
                query: {
                    /** @description The currency to get the payment methods for. */
                    currency: components["schemas"]["Currency"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentMethodResponse"][];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/{flow_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Payment Flow
         * @description Get a payment flow by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the payment flow. */
                    flow_id: components["schemas"]["PaymentFlowId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentFlowResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/licenses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Matched Licenses
         * @description Get the available system licenses for the requested jurisdiction/site header combination.
         *             The licenses are ordered in their priority order,
         *             and thus the first license in the list is the most preferred one.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LicenseResponse"][];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/preflight": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Preflight Check
         * @description This preflight endpoint should be the first endpoint
         *             to be called by the client or the SSR implementation.
         *             It is used to check if the user is able to access the
         *             host + jurisdiction combination. Should they not be allowed to access
         *             the site, the endpoint will return a `JURISDICTION_NOT_SUPPORTED` error,
         *             possibly containing a list of alternative sites that the user can access.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game-provider/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Game Providers
         * @description List all game providers.
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatorResponse_for_GameProviderResponse_and_null_and_int64"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game-provider/{provider_identifier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Game Provider
         * @description Get a game provider by its ID.
         *             This can be used to show a more detailed view of of the
         *             provider profile in the frontend, which may require more data than
         *             the search endpoint provides.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the game provider. */
                    provider_identifier: components["schemas"]["GameProviderIdentifier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The response to a game provider request. It contains all available
                 *      information about the provider. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GameProviderResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/{provider_slug}/{game_slug}/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Create Game Session
         * @description Create a new game session by providing the game ID,
         *         as well as the currency with which the game should be played with,
         *         and the client type of the user.
         *         The response will redirect the user to the third party URL of the game provider.
         *         Please note that this request should be used in conjunction with an iframe,
         *         so that the user does not get redirected from the casino website.
         */
        get: {
            parameters: {
                query: {
                    /** @description The device type the game session is started on. Some games may only be
                     *      available on certain devices. */
                    client_type: components["schemas"]["Device"];
                    /** @description The currency (wallet) to use for the game session. It can not be changed
                     *      during the session. */
                    currency: components["schemas"]["Currency"];
                };
                header?: never;
                path: {
                    game_slug: string;
                    provider_slug: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description no content */
                307: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Game Session
         * @description Create a new game session by providing the game ID,
         *         as well as the currency with which the game should be played with,
         *         and the client type of the user.
         */
        post: {
            parameters: {
                query: {
                    /** @description The device type the game session is started on. Some games may only be
                     *      available on certain devices. */
                    client_type: components["schemas"]["Device"];
                    /** @description The currency (wallet) to use for the game session. It can not be changed
                     *      during the session. */
                    currency: components["schemas"]["Currency"];
                };
                header?: never;
                path: {
                    game_slug: string;
                    provider_slug: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateGameSessionPostResponse"];
                    };
                };
                /** @description no content */
                307: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Games
         * @description List all games or games of a specific category.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The category identifier to filter games by. If set, only games in this
                     *      category are returned. Note: this is not the category ID, but the
                     *      identifier. */
                    category?: string | null;
                    /** @description The provider to filter games by. If set, only games by this provider are
                     *      returned. */
                    provider_identifier?: components["schemas"]["GameProviderIdentifier"] | null;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatorResponse_for_GameResponse_and_ListGameQuery_and_int64"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/action/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Game Actions
         * @description Get a list of all game actions of the user.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The type of the game action to filter by. If not set, all game actions
                     *      (bet, win, etc.) will be included. */
                    action_type?: components["schemas"]["ListBetTypeQuery"] | null;
                    /** @description Game ID to filter the game actions by. If not set, all game actions will
                     *      be included. */
                    game_identifier?: components["schemas"]["GameIdentifier"] | null;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatorResponse_for_GameActionResponse_and_ListGameActionsQuery_and_int64"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/category/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Available Game Categories
         * @description Get a list of all game categories available in the casino.
         *         This can be used to show a list of game categories to the user,
         *         so that they can choose which category they want to explore.
         *         There are two major types of categories, staic and dynamic.
         *         Static categories are predefined by the casino, while dynamic categories
         *         cover games based on user behavior and other factors.
         *         Dynamic categories are recalcuated periodically.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The group of game categories to filter by. If set, only categories in
                     *      this group are returned. */
                    group?: string | null;
                    /** @description Whether to include the games in the category in the response. If set to
                     *      `true`, the games in the category are included in the response. */
                    include_games?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GameCategoryListResponse"][];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/{provider_slug}/{game_slug}/rating": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rate Game
         * @description Rate a game by its ID.
         *         This can be used to allow users to rate games,
         *         so that other users can see the rating of the game.
         *         Sending a rating of null will remove the rating of the user.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    game_slug: string;
                    provider_slug: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RateGameRequest"];
                };
            };
            responses: {
                /** @description no content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/{provider_slug}/{game_slug}/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Game Ratings
         * @description User ratings split up into likes and dislikes
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    game_slug: string;
                    provider_slug: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GameRatingsResponse"];
                    };
                };
                /** @description no content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/{provider_slug}/{game_slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Game
         * @description Get a game by its ID. This can be used to show a more detailed view of a game,
         *         including its name, description,
         *         and other metadata, that might be required to display the game on the frontend.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    game_slug: string;
                    provider_slug: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GameResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Notifications
         * @description Get a list of all notifications for the current user.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The read status of the notifications to filter by. */
                    read_status?: components["schemas"]["ReadStatus"] | null;
                    /** @description The types of the notifications to filter by. */
                    types?: components["schemas"]["NotificationTypeDiscriminants"][] | null;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatorResponse_for_NotificationResponse_and_ListNotificationsQuery_and_int64"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification/{notification_id}/read-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Notification Read Status
         * @description Mark a notification as read.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the notification to retrieve. */
                    notification_id: components["schemas"]["NotificationId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ReadStatus"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Profile
         * @description Get the user profile of the currently logged in user.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Balance
         * @description Get the balance of the currently logged in user. The wallets are returned in the order of their selection. Frontends mays utilize this order to display the wallets, and to identify the active wallet.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserWalletBalanceResponse"][];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Settings
         * @description Get the settings of the currently logged in user.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PatchUserSettingsRequest"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update User Settings
         * @description Update the settings of the currently logged in user.
         *
         *     This endpoint allows for partial updates of the user settings, by
         *     only updating the fields that are provided in the request.
         *
         *     If a field is set to `null`, it will be reset to the default value.
         *
         *     If a field is not provided, it will not be updated.
         *
         *     Partial updates follow the [RFC 7396](https://datatracker.ietf.org/doc/html/rfc7396) JSON Merge Patch standard.
         *
         *     ```json
         *     // Given the following JSON
         *     {
         *     	"title": "Goodbye!",
         *     	"author" : {
         *     		"givenName" : "John",
         *     		"familyName" : "Doe"
         *     	},
         *     	"tags":[ "example", "sample" ],
         *     	"content": "This will be unchanged"
         *     }
         *
         *     // Merged with the following patch
         *     {
         *     	"title": "Hello!",
         *     	"phoneNumber": "+01-123-456-7890",
         *     	"author": {
         *     		"familyName": null
         *     	},
         *     	"tags": [ "example" ]
         *     }
         *
         *     // Will result in the following JSON
         *     {
         *     	"title": "Hello!",
         *     	"author" : {
         *     		"givenName" : "John"
         *     	},
         *     	"tags": [ "example" ],
         *     	"content": "This will be unchanged",
         *     	"phoneNumber": "+01-123-456-7890"
         *     }
         *     ```
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PatchUserSettingsRequest"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update User Address
         * @description Update the address of the currently logged in user. The address is used for shipping and other purposes.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PatchUserAddressRequest"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user/active-wallet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update User Active Wallet
         * @description Update the selected wallet of the user. The user balance endpoint will return the user's wallets in the order of their selection time.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SelectWalletRequest"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update User Password
         * @description Update the password of the currently logged in user. The current password is required to ensure that the user is authorized to change the password.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PatchUserPasswordRequest"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user/username": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Username
         * @description Update the username of the currently logged in user. The username must be unique.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PatchUsernameRequest"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete User Account
         * @description Delete the account of the currently logged in user. The user must provide the current password to ensure that they are authorized to delete the account.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["DeleteUserAccountRequest"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kyc/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get KYC Access Token
         * @description This endpoint returns a temporary short-lived token that is bound to the user.
         *     It can be used in conjunction with a KYC provider's SDK to perform KYC validation in the frontend.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["KycAccessTokenResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kyc/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get KYC Status
         * @description Returns the current KYC status of the user.
         *     This endpoint may be used to prevent the user from going through the KYC process again if they have already completed it.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["KycStatusResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticker/{channel}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Ticker Channel Events
         * @description Get pre-buffered events for a specific ticker channel. This should be used in conjunction with SSR and the WebSocket connection to pre-fill tickers on SSR and to make them live-update on client side.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ticker channel */
                    channel: components["schemas"]["WebsocketTickerChannel"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WebsocketServerEvent"][];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/games": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Games
         * @description Search for active games by name or other criteria.
         */
        get: {
            parameters: {
                query?: {
                    /** @description An organic search query to find items by. */
                    query?: string | null;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatorResponse_for_ScoredSearchResponseItem_for_SearchGameResponse_and_SearchQuery_and_Nullable_uint"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/game-providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Game Providers
         * @description Search for active game providers by name or other criteria.
         */
        get: {
            parameters: {
                query?: {
                    /** @description An organic search query to find items by. */
                    query?: string | null;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatorResponse_for_ScoredSearchResponseItem_for_SearchGameProviderResponse_and_SearchQuery_and_Nullable_uint"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/site-setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Matched Site
         * @description The the matched site based on the host header.
         *             Use this to differentiate between different sites in a multi-site setup,
         *             allowing for different configurations, themes, etc.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Site setup response, used for dymainc frontend branding and configuration. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SiteResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/user/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Users
         * @description Fetch a paginated list of users in the system.
         */
        get: {
            parameters: {
                query?: {
                    filters?: string;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatorResponse_for_AdminUserResponse_and_ActiveFilters_and_int64"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/user/{user_id}/block": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Block User
         * @description Block the user until the specified date. If date is not set, the user will be blocked indefinitely.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: components["schemas"]["UserId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BlockUserBody"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/admin/user/{user_id}/unblock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Unblock User
         * @description Unblock the user.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: components["schemas"]["UserId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/admin/user/{user_id}/exclude": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Exclude User
         * @description Exclude the user until the specified date.
         *         If date is not set, the user will be excluded indefinitely.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: components["schemas"]["UserId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BlockUserBody"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/admin/user/{user_id}/include": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Include User
         * @description Include the user.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: components["schemas"]["UserId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/admin/session/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Sessions
         * @description Fetch sessions
         */
        get: {
            parameters: {
                query?: {
                    filters?: string;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatorResponse_for_SessionResponse_and_ActiveFilters_and_int64"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/payment/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Payments
         * @description This endpoint returns a list of payments and payment flows in chronological order with the newest items first.
         *     You may filter payments via the following sample filter:
         *
         *     ```json
         *     {
         *     	"payment_flow_id": {"$eq": "1"},
         *     	"payment_id": {"$eq": "1"},
         *     	"wallet_id": {"$eq": "1"},
         *     	"user_id": {"$eq": "1"},
         *     	"payment_flow_status": {"$eq": "pending"},
         *     	"payment_type": {"$eq": "deposit"},
         *     	"payment_flow_amount": {"$eq": "100"},
         *     	"payment_amount": {"$eq": "100"},
         *     	"curency": {"$eq": "USD"},
         *     	"payment_is_adjustment": {"$eq": "true"},
         *     	"user_name": {"$contains": "john"},
         *     	"user_email": {"$contains": "john"},
         *     	"integration_id": {"$eq": "1"},
         *     	"payment_provider_name": {"$contains": "star"},
         *     	"payment_method_id": {"$eq": "1"},
         *     	"payment_method_name": {"$contains": "pix"},
         *     	"payment_flow_created_at": {"$eq": "2021-01-01T00:00:00Z"},
         *     	"payment_created_at": {"$eq": "2021-01-01T00:00:00Z"},
         *     	"payment_flow_status_created_at": {"$eq": "2021-01-01T00:00:00Z"}
         *     }
         *     ```
         */
        get: {
            parameters: {
                query?: {
                    filters?: string;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatorResponse_for_AdminPaymentListResponse_and_ActiveFilters_and_int64"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/payment/flow/{flow_id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Approve Payment Flow
         * @description Approve the specified payment flow.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    flow_id: components["schemas"]["PaymentFlowId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/admin/payment/flow/{flow_id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Reject Payment Flow
         * @description Reject the specified payment flow.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    flow_id: components["schemas"]["PaymentFlowId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RejectPaymentFlowBody"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/admin/payment/limits/{currency}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Payment Limits
         * @description Update the limits for the specified currency.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    currency: components["schemas"]["Currency"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LimitOverridesPrototype"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/admin/payment/balance/adjust": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update User Balance
         * @description Adjust the balance for the specified user and currency.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AdjustUserBalanceBody"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/admin/wallet/{wallet_id}/limits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Wallet Limits
         * @description Patch the wallet limits.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    wallet_id: components["schemas"]["WalletId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LimitOverridesPrototype"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/admin/game/rounds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Game Rounds
         * @description Fetch game rounds
         */
        get: {
            parameters: {
                query?: {
                    filters?: string;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatorResponse_for_AdminBetResponse_and_ActiveFilters_and_int64"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/category/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Game Categories
         * @description Fetch game categories
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CategoryResponse"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/category/group/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Category Groups
         * @description Fetch category groups
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CategoryGroupResponse"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/docs/spec.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * OpenAPI Spec
         * @description Returns the OpenAPI spec to this API
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: never;
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/docs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * API Docs
         * @description This documentation page
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description HTML content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/html": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * API Root
         * @description The root of the API
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description plain text */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain; charset=utf-8": unknown;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/startup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Startup Probe
         * @description Check if the app has finished booting
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthcheckResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Readiness Probe
         * @description Check if the app is ready to serve requests
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthcheckResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Liveness Probe
         * @description Check if the app is running and not deadlocked
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthcheckResponse"];
                    };
                };
                /** @description Represents various errors that can occur during server operations.
                 *
                 *      This enum covers a wide range of error scenarios, from wallet-related issues
                 *      to payment processing problems, user authentication errors, and more. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AccessTokenTokenResponse: {
            /** Format: uuid */
            token: string;
        };
        ActiveFilters: {
            [key: string]: components["schemas"]["FilterOperator"];
        };
        AdjustUserBalanceBody: {
            amount: components["schemas"]["SystemAmount"];
            currency: components["schemas"]["Currency"];
            note?: string | null;
            user_id: components["schemas"]["UserId"];
        };
        AdminBetResponse: {
            /** @description The amount of the action */
            amount_bonus: components["schemas"]["SystemAmount"];
            /** @description The amount of the action */
            amount_locked: components["schemas"]["SystemAmount"];
            /** @description The amount of the action */
            amount_unlocked: components["schemas"]["SystemAmount"];
            /** @description The action type */
            bet_type: components["schemas"]["BetType"];
            /**
             * Format: date-time
             * @description The date and time the action was created
             */
            created_at: string;
            /** @description The currency of the action */
            currency: components["schemas"]["Currency"];
            /** @description The external ID of the bet */
            ext_bet_id: string;
            /** @description The external ID of the round */
            ext_round_id: string;
            /** @description The ID of the game */
            game_id: components["schemas"]["GameId"];
            /** @description The ID of the bet */
            id: components["schemas"]["BetId"];
            /** @description The ID of the integration that this bet belongs to */
            integration_id: components["schemas"]["IntegrationId"];
            /** @description The metadata of the action */
            metadata?: unknown;
            /** @description Whether the action was invalidated through a rollback */
            rolled_back: boolean;
            /** @description The ID of the user */
            user_id: components["schemas"]["UserId"];
            /** @description The ID of the wallet */
            wallet_id: components["schemas"]["WalletId"];
        };
        AdminPaymentListResponse: {
            /** @description The currency of the payment. */
            currency: components["schemas"]["Currency"];
            /** @description The ID of the payment provider. This is optional, as the payment
             *      may be a balance adjustment, which does not have a payment provider. */
            integration_id?: components["schemas"]["IntegrationId"] | null;
            /** @description The amount of the payment. This is optional, as the payment may not
             *      exist as described above. Note that this value is usually the same as
             *      the payment flow amount, but it may differ in some rare cases. */
            payment_amount?: components["schemas"]["SystemAmount"] | null;
            /**
             * Format: date-time
             * @description The creation date of the payment. This is optional, as the payment may
             *      not exist as described above.
             */
            payment_created_at?: string | null;
            /** @description The amount of the payment flow. This is optional, as the flow may not
             *      exist as described above. */
            payment_flow_amount?: components["schemas"]["SystemAmount"] | null;
            /**
             * Format: date-time
             * @description The creation date of the payment flow. This is optional, as the flow may
             *      not exist as described above.
             */
            payment_flow_created_at?: string | null;
            /** @description The payment flow ID of this payment. This is optional, as there may be
             *      payments, such as balance adjustments, that do not have an associated
             *      payment flow. */
            payment_flow_id?: components["schemas"]["PaymentFlowId"] | null;
            /** @description The status of the payment flow. This is optional, as the flow may not
             *      exist as described above, or the flow has been created but not
             *      initialized yet. */
            payment_flow_status?: components["schemas"]["PaymentStatus"] | null;
            /**
             * Format: date-time
             * @description The creation date of the payment flow status. This is optional, as the
             *      flow may not exist as described above, or the flow has been created but
             *      not initialized yet.
             */
            payment_flow_status_created_at?: string | null;
            /** @description The payment ID of this payment. This is optional, as the associated flow
             *      may not have been completed yet. */
            payment_id?: components["schemas"]["PaymentId"] | null;
            /** @description Whether this payment is an adjustment. This signifies that the payment
             *      is not a regular payment, but an adjustment to the user's balance. */
            payment_is_adjustment: boolean;
            /** @description Metadata associated with the payment entry. This is optional, as the
             *      payment may not exist as described above, or there is no metadata
             *      associated with the payment. */
            payment_metadata?: unknown;
            /** @description The payment method ID of the payment. This is optional, as the payment
             *      may be a balance adjustment, which does not have a payment method. */
            payment_method_id?: components["schemas"]["PaymentMethodId"] | null;
            /** @description The name of the payment method of the payment. This is optional, as the
             *      payment may be a balance adjustment, which does not have a payment
             *      method. */
            payment_method_name?: string | null;
            /** @description The name of the payment provider of the payment. This is optional, as
             *      the payment may be a balance adjustment, which does not have a payment
             *      provider. */
            payment_provider_name?: string | null;
            /** @description The type of payment that this payment is. */
            payment_type: components["schemas"]["PaymentType"];
            /** @description The email of the user that this payment is associated with. */
            user_email: string;
            /** @description The user ID of the user that this payment is associated with. */
            user_id: components["schemas"]["UserId"];
            /** @description The name of the user that this payment is associated with. */
            user_name: string;
            /** @description The wallet ID of the wallet that this payment is associated with. */
            wallet_id: components["schemas"]["WalletId"];
        };
        AdminUserResponse: {
            /** Format: date */
            birthdate: string;
            /** Format: date-time */
            blocked_until?: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            deleted_at?: string | null;
            email: string;
            email_verified: boolean;
            /** Format: date-time */
            excluded_until?: string | null;
            family_name?: string | null;
            gender?: components["schemas"]["Gender"] | null;
            id: components["schemas"]["UserId"];
            jurisdiction: string;
            name: string;
            phone: string;
            phone_verified: boolean;
            /** Format: date-time */
            updated_at: string;
        };
        /** @example auth_session_id_1234 */
        AuthSessionId: string;
        /**
         * Format: int64
         * @example 1
         */
        BetId: number;
        /** @enum {string} */
        BetType: "wager" | "win";
        BlockUserBody: {
            reason?: string | null;
            /** Format: date-time */
            until?: string | null;
        };
        CategoryGroupResponse: {
            /**
             * Format: date-time
             * @description The time the category group was created
             */
            created_at: string;
            /** @description The category group ID */
            id: components["schemas"]["GameCategoryGroupId"];
            /** @description The category group identifier, used for lookups and URLs */
            identifier: string;
        };
        CategoryResponse: {
            /**
             * Format: date-time
             * @description The time the category was created
             */
            created_at: string;
            /** @description Whether the category is hidden from the public */
            hidden: boolean;
            /** @description The category ID */
            id: components["schemas"]["GameCategoryId"];
            /** @description The category identifier, used for lookups and URLs */
            identifier: string;
            /** @description Whether the category is user-specific. User specific categories have
             *      different content based on the user. For example, a user-specific
             *      category might show different content based on the user's playing
             *      history. */
            user_specific: boolean;
        };
        /**
         * @description A country represented by its ISO 3166-1 alpha-2 code.
         * @example US
         * @example DE
         * @example BR
         * @enum {string}
         */
        Country: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KP" | "KR" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "US" | "UM" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW";
        CreateDepositFlowResponse: {
            /** @description Withdrawal payment flow ID */
            flow_id: components["schemas"]["PaymentFlowId"];
            /** @description Counts of all payment flow statuses for this payment type */
            status_counts: components["schemas"]["PaymentFlowStatusCountsResponse"];
        } & {
            pix: {
                /** @description The PIX code used by the user for depositing the amount */
                code: string;
            };
        };
        CreateGameSessionPostResponse: {
            /** @description The URL to return to after the game session is finished. This URL can be
             *      used to redirect the user back to the application after the game session. */
            return_url: string;
            /** @description The URL to the game session. This URL can be used to start the game
             *      session in a new tab, window or iframe. */
            url: string;
        };
        CreateGameSessionQuery: {
            /** @description The device type the game session is started on. Some games may only be
             *      available on certain devices. */
            client_type: components["schemas"]["Device"];
            /** @description The currency (wallet) to use for the game session. It can not be changed
             *      during the session. */
            currency: components["schemas"]["Currency"];
        };
        CreateSignupFlowResponse: {
            /** @description The ID of the created signup flow. */
            flow_id: string;
        };
        CreateWithdrawalFlowResponse: {
            /** @description Withdrawal payment flow ID */
            flow_id: components["schemas"]["PaymentFlowId"];
            /** @description Counts of all payment flow statuses for this payment type */
            status_counts: components["schemas"]["PaymentFlowStatusCountsResponse"];
        };
        /**
         * @description ISO 4217 3-letter currency code or 3/4-letter crypto currency code
         * @example USD
         * @example EUR
         * @example BRL
         * @example BTC
         * @example USDT
         * @enum {string}
         */
        Currency: "AED" | "AFN" | "ALL" | "AMD" | "XCG" | "AOA" | "ARS" | "AUD" | "AWG" | "AZN" | "BAM" | "BBD" | "BDT" | "BGN" | "BHD" | "BIF" | "BMD" | "BND" | "BOB" | "BOV" | "BRL" | "BSD" | "BTN" | "BWP" | "BYN" | "BZD" | "CAD" | "CDF" | "CHE" | "CHF" | "CHW" | "CLF" | "CLP" | "CNY" | "COP" | "COU" | "CRC" | "CUC" | "CUP" | "CVE" | "CZK" | "DJF" | "DKK" | "DOP" | "DZD" | "EGP" | "ERN" | "ETB" | "EUR" | "FJD" | "FKP" | "GBP" | "GEL" | "GHS" | "GIP" | "GMD" | "GNF" | "GTQ" | "GYD" | "HKD" | "HNL" | "HRK" | "HTG" | "HUF" | "IDR" | "ILS" | "INR" | "IQD" | "IRR" | "ISK" | "JMD" | "JOD" | "JPY" | "KES" | "KGS" | "KHR" | "KMF" | "KPW" | "KRW" | "KWD" | "KYD" | "KZT" | "LAK" | "LBP" | "LKR" | "LRD" | "LSL" | "LYD" | "MAD" | "MDL" | "MGA" | "MKD" | "MMK" | "MNT" | "MOP" | "MRU" | "MUR" | "MVR" | "MWK" | "MXN" | "MXV" | "MYR" | "MZN" | "NAD" | "NGN" | "NIO" | "NOK" | "NPR" | "NZD" | "OMR" | "PAB" | "PEN" | "PGK" | "PHP" | "PKR" | "PLN" | "PYG" | "QAR" | "RON" | "RSD" | "RUB" | "RWF" | "SAR" | "SBD" | "SCR" | "SDG" | "SEK" | "SGD" | "SHP" | "SLE" | "SLL" | "SOS" | "SRD" | "SSP" | "STN" | "SVC" | "SYP" | "SZL" | "THB" | "TJS" | "TMT" | "TND" | "TOP" | "TRY" | "TTD" | "TWD" | "TZS" | "UAH" | "UGX" | "USD" | "USN" | "UYI" | "UYU" | "UYW" | "UZS" | "VED" | "VES" | "VND" | "VUV" | "WST" | "XAF" | "XAG" | "XAU" | "XBA" | "XBB" | "XBC" | "XBD" | "XCD" | "XDR" | "XOF" | "XPD" | "XPF" | "XPT" | "XSU" | "XTS" | "XUA" | "XXX" | "YER" | "ZAR" | "ZMW" | "ZWL" | "ZWG" | "BTC" | "ETH" | "USDC" | "USDT" | "BCH" | "XRP" | "FUN" | "ADA" | "TRX" | "BSV" | "BNB" | "NEO";
        DeleteUserAccountRequest: {
            /** @description The current password of the user. This is required to ensure that the
             *      user is the one making the request. */
            current_password: string;
            /** @description The reason provided by the user, for deleting their account. */
            reason?: string | null;
        };
        /** @enum {string} */
        Device: "mobile" | "desktop";
        /** Format: int64 */
        DurationSeconds: number;
        FilterOperator: {
            $eq: unknown;
        } | {
            $startsWith: unknown;
        } | {
            $contains: unknown;
        } | {
            $in: unknown;
        } | {
            $between: unknown;
        } | {
            $lt: unknown;
        } | {
            $lte: unknown;
        } | {
            $gt: unknown;
        } | {
            $gte: unknown;
        };
        FiltersJson: {
            /** @default {} */
            filters: string;
        };
        FinalizePasswordResetRequest: {
            /** @description The new password for the user. */
            password: string;
            /**
             * Format: uuid
             * @description The token that was sent to the user and has to be included for the reset
             *      to succeed.
             */
            token: string;
        };
        GameActionResponse: {
            /** @description The type of the action that was performed. Either Bets or Wins. */
            action: components["schemas"]["BetType"];
            /** @description The amount of the bet that was used from the bonus balance. */
            amount_bonus: components["schemas"]["SystemAmount"];
            /** @description The amount of the bet that was used from the locked balance. */
            amount_locked: components["schemas"]["SystemAmount"];
            /** @description The amount of the bet that was used from the unlocked balance. */
            amount_unlocked: components["schemas"]["SystemAmount"];
            /**
             * Format: date-time
             * @description The date and time the action was performed.
             */
            created_at: string;
            /** @description The currency the amount was in. */
            currency: components["schemas"]["Currency"];
            /** @description The identifier of the game the action was performed on. */
            game_identifier: components["schemas"]["GameIdentifier"];
            /** @description The name of the game the action was performed on. */
            game_name: string;
            /** @description The ID of the game action. */
            id: components["schemas"]["BetId"];
        };
        GameCategory: components["schemas"]["StaticGameCategory"] | string;
        /**
         * Format: int64
         * @example 1
         */
        GameCategoryGroupId: number;
        /**
         * Format: int64
         * @example 1
         */
        GameCategoryId: number;
        GameCategoryListQuery: {
            /** @description The group of game categories to filter by. If set, only categories in
             *      this group are returned. */
            group?: string | null;
            /**
             * @description Whether to include the games in the category in the response. If set to
             *      `true`, the games in the category are included in the response.
             * @default false
             */
            include_games: boolean;
        };
        GameCategoryListResponse: {
            /** @description The games in the category. This field is only populated when the
             *      category is requested with the `include` parameter set to `games`. */
            games?: components["schemas"]["PaginatorResponse_for_GameResponse_and_GameCategoryListQuery_and_int64"] | null;
            /** @description The ID of the game category. */
            id: components["schemas"]["GameCategoryId"];
            /** @description The identifier of the game category. This is a unique string that can be
             *      used to identify the category in the game search endpoint. */
            identifier: string;
        };
        /**
         * Format: int64
         * @example 1
         */
        GameId: number;
        /**
         * @description Game identifier, in the format <provider>/<game>
         * @example spribe/aviator
         */
        GameIdentifier: string;
        GameParams: {
            game_slug: string;
            provider_slug: string;
        };
        /** @example game_provider_1234 */
        GameProviderIdentifier: string;
        GameProviderParams: {
            /** @description The ID of the game provider. */
            provider_identifier: components["schemas"]["GameProviderIdentifier"];
        };
        /** @description The response to a game provider request. It contains all available
         *      information about the provider. */
        GameProviderResponse: {
            /** @description The description of the game provider. This text does not follow HTML or
             *      Markdown, so newlines may need to be handled explicitly. */
            description?: string | null;
            /** @description The slug of the game provider. This may be used in URLs. */
            identifier: components["schemas"]["GameProviderIdentifier"];
            /** @description The name of the game provider. Do not use this in URLs, as it may
             *      contain special characters. */
            name: string;
        };
        /** @enum {string} */
        GameRating: "like" | "dislike";
        GameRatingsResponse: {
            /**
             * Format: int64
             * @description The number of dislikes the game has received.
             */
            dislikes: number;
            /**
             * Format: int64
             * @description The number of likes the game has received.
             */
            likes: number;
            /** @description The rating the current user has given the game. If the user has not
             *      rated the game, this field is `null`. If the user Is not
             *      authenticated, this field is also `null`. */
            own_rating?: components["schemas"]["GameRating"] | null;
        };
        GameResponse: {
            /** @description The description of the game. This text does not follow HTML or Markdown,
             *      so newlines may need to be handled explicitly. */
            description?: string | null;
            /** @description The categories the game belongs to. */
            categories: components["schemas"]["GameCategory"][];
            /** @description The devices the game is available on. */
            devices: components["schemas"]["Device"][];
            /** @description The identifier of the game. This may be used in URLs and for game
             *      lookups. */
            identifier: components["schemas"]["GameIdentifier"];
            /** @description Whether the game is available in HD. */
            is_hd: boolean;
            /** @description The name of the game. Do not use this in URLs, as it may contain special
             *      characters. */
            name: string;
        };
        /** @enum {string} */
        Gender: "male" | "female" | "other";
        GetFasttrackTokenResponseBody: {
            /** @description The JWT token for the user. */
            jwt: string;
        };
        GetPaymentMethodsQuery: {
            /** @description The currency to get the payment methods for. */
            currency: components["schemas"]["Currency"];
        };
        HealthcheckResponse: {
            /** @description The region of the server deployment */
            region?: string | null;
        };
        InitializePasswordResetRequest: {
            /**
             * Format: email
             * @description The email address of the user to reset the password for.
             * @example john@doe.com
             */
            email: string;
        };
        /**
         * Format: int64
         * @example 1
         */
        IntegrationId: number;
        /** @enum {string} */
        IntegrationIdentifier: "coinlayer" | "digito" | "fasttrack" | "fixer_io" | "infinigame" | "open_ai" | "sandbox" | "sumsub";
        InternalError: string;
        KycAccessTokenResponse: {
            /** @description KYC provider identifier. This should be used to differentiate which
             *      WebSDK/flow to use. */
            provider_identifier: components["schemas"]["IntegrationIdentifier"];
            /** @description Access token provided by the KYC integration */
            token: string;
            /** @description User ID, this is the current user, and should never deviate from the
             *      current user */
            user_id: components["schemas"]["UserId"];
            /** @description User metadata that can be used to pre-fill KYC information */
            user_metadata: components["schemas"]["KycAccessTokenUserMetadataResponse"];
        };
        /** @description Metadata that can be used to pre-fill KYC information. */
        KycAccessTokenUserMetadataResponse: {
            /** @description User's jurisdiction country code in ISO 3166-1 alpha-2 format */
            country_alpha2: string;
            /** @description The user's email */
            email: string;
            /** @description User's language in IETF BCP 47 language tag format */
            language: string;
            /** @description The user's phone number in E.164 format */
            phone_number: string;
        };
        KycStatusResponse: {
            /** @description Whether the user has an active KYC and thus does not need to go through
             *      the KYC process again. */
            has_active_kyc: boolean;
        };
        /**
         * Format: int64
         * @example 1
         */
        LicenseId: number;
        LicenseResponse: {
            /** @description The ID of the license. */
            id: components["schemas"]["LicenseId"];
            /** @description The name of the license. */
            name: string;
            /** @description The root jurisdiction of the license. While licenses can cover multiple
             *      jurisdictions, this is the jurisdiction that the license is rooted in.
             *      Examples include Curacao, Anjouan, etc. */
            root_jurisdiction: components["schemas"]["Country"];
        };
        LimitOverridesPrototype: {
            deposit_cooldown?: components["schemas"]["Maybe_DurationSeconds"];
            deposit_max?: components["schemas"]["Maybe_Decimal"];
            deposit_max_first?: components["schemas"]["Maybe_Decimal"];
            deposit_min?: components["schemas"]["Maybe_Decimal"];
            deposit_min_first?: components["schemas"]["Maybe_Decimal"];
            timeframe_limits?: components["schemas"]["Maybe_Array_of_TimeframeLimitPrototype"];
            withdrawal_cooldown?: components["schemas"]["Maybe_DurationSeconds"];
            withdrawal_max?: components["schemas"]["Maybe_Decimal"];
            withdrawal_max_first?: components["schemas"]["Maybe_Decimal"];
            withdrawal_min?: components["schemas"]["Maybe_Decimal"];
            withdrawal_min_first?: components["schemas"]["Maybe_Decimal"];
        };
        /** @enum {string} */
        ListBetTypeQuery: "bet" | "win";
        ListGameActionsQuery: {
            /** @description The type of the game action to filter by. If not set, all game actions
             *      (bet, win, etc.) will be included. */
            action_type?: components["schemas"]["ListBetTypeQuery"] | null;
            /** @description Game ID to filter the game actions by. If not set, all game actions will
             *      be included. */
            game_identifier?: components["schemas"]["GameIdentifier"] | null;
        };
        ListGameQuery: {
            /** @description The category identifier to filter games by. If set, only games in this
             *      category are returned. Note: this is not the category ID, but the
             *      identifier. */
            category?: string | null;
            /** @description The provider to filter games by. If set, only games by this provider are
             *      returned. */
            provider_identifier?: components["schemas"]["GameProviderIdentifier"] | null;
        };
        ListNotificationsQuery: {
            /** @description The read status of the notifications to filter by. */
            read_status?: components["schemas"]["ReadStatus"] | null;
            /** @description The types of the notifications to filter by. */
            types?: components["schemas"]["NotificationTypeDiscriminants"][] | null;
        };
        ListPaymentFlowsQuery: {
            /** @description The payment type to filter the payment flows by. If not set, all payment
             *      types will be included. */
            payment_type?: components["schemas"]["PaymentType"] | null;
            /** @description The wallet ID to filter the payment flows by. If not set, all wallets of
             *      the user will be included. */
            wallet_id?: components["schemas"]["WalletId"] | null;
        };
        LoginRequest: {
            /**
             * @description The password of the user.
             * @example test
             */
            password: string;
            /**
             * Format: email
             * @description The email address of the user.
             * @example john@doe.com
             */
            username: string;
        };
        Maybe_Array_of_TimeframeLimitPrototype: components["schemas"]["TimeframeLimitPrototype"][] | null;
        Maybe_Decimal: string | number | null;
        Maybe_DurationSeconds: components["schemas"]["DurationSeconds"] | null;
        Maybe_PixKeyTypeDiscriminants: components["schemas"]["PixKeyTypeDiscriminants"] | null;
        Maybe_boolean: boolean | null;
        Maybe_string: string | null;
        /**
         * Format: int64
         * @example 1
         */
        NotificationId: number;
        NotificationParams: {
            /** @description The ID of the notification to retrieve. */
            notification_id: components["schemas"]["NotificationId"];
        };
        NotificationResponse: {
            /**
             * Format: date-time
             * @description The time the notification was created.
             */
            created_at: string;
            /** @description The ID of the notification. */
            id: components["schemas"]["NotificationId"];
            /**
             * Format: date-time
             * @description The time the notification was read. If `null` the notification has not
             *      been read.
             */
            read_at?: string | null;
        } & ({
            /** @constant */
            type: "payment_status_update";
            data: {
                flow_id: components["schemas"]["PaymentFlowId"];
                status: components["schemas"]["PaymentStatus"];
            };
        } | {
            /** @constant */
            type: "kyc_completed";
        } | {
            /** @constant */
            type: "custom";
            data: string;
        } | {
            /** @constant */
            type: "banner";
            data: {
                title: string;
                /** Format: uri */
                link?: string | null;
                message?: string | null;
            };
        } | {
            /** @constant */
            type: "popup_modal";
            data: {
                title: string;
                /** Format: uri */
                link?: string | null;
                message: string;
            };
        });
        NotificationTypeDiscriminants: "payment_status_update" | "kyc_completed" | "custom" | "banner" | "popup_modal";
        PaginatorMetadata_for_ActiveFilters_and_int64: {
            filters?: components["schemas"]["ActiveFilters"] | null;
            pagination: components["schemas"]["PaginatorPosition_for_int64"];
        };
        PaginatorMetadata_for_GameCategoryListQuery_and_int64: {
            filters?: components["schemas"]["GameCategoryListQuery"] | null;
            pagination: components["schemas"]["PaginatorPosition_for_int64"];
        };
        PaginatorMetadata_for_ListGameActionsQuery_and_int64: {
            filters?: components["schemas"]["ListGameActionsQuery"] | null;
            pagination: components["schemas"]["PaginatorPosition_for_int64"];
        };
        PaginatorMetadata_for_ListGameQuery_and_int64: {
            filters?: components["schemas"]["ListGameQuery"] | null;
            pagination: components["schemas"]["PaginatorPosition_for_int64"];
        };
        PaginatorMetadata_for_ListNotificationsQuery_and_int64: {
            filters?: components["schemas"]["ListNotificationsQuery"] | null;
            pagination: components["schemas"]["PaginatorPosition_for_int64"];
        };
        PaginatorMetadata_for_ListPaymentFlowsQuery_and_int64: {
            filters?: components["schemas"]["ListPaymentFlowsQuery"] | null;
            pagination: components["schemas"]["PaginatorPosition_for_int64"];
        };
        PaginatorMetadata_for_SearchQuery_and_Nullable_uint: {
            filters?: components["schemas"]["SearchQuery"] | null;
            pagination: components["schemas"]["PaginatorPosition_for_Nullable_uint"];
        };
        PaginatorMetadata_for_null_and_int64: {
            filters?: null;
            pagination: components["schemas"]["PaginatorPosition_for_int64"];
        };
        PaginatorPosition_for_Nullable_uint: {
            /**
             * Format: uint64
             * @default 20
             */
            limit: number;
            /**
             * Format: uint64
             * @default 0
             */
            offset: number;
            /** Format: uint */
            total_items?: number | null;
        };
        PaginatorPosition_for_int64: {
            /**
             * Format: uint64
             * @default 20
             */
            limit: number;
            /**
             * Format: uint64
             * @default 0
             */
            offset: number;
            /** Format: int64 */
            total_items: number;
        };
        PaginatorResponse_for_AdminBetResponse_and_ActiveFilters_and_int64: {
            data: components["schemas"]["AdminBetResponse"][];
            metadata: components["schemas"]["PaginatorMetadata_for_ActiveFilters_and_int64"];
        };
        PaginatorResponse_for_AdminPaymentListResponse_and_ActiveFilters_and_int64: {
            data: components["schemas"]["AdminPaymentListResponse"][];
            metadata: components["schemas"]["PaginatorMetadata_for_ActiveFilters_and_int64"];
        };
        PaginatorResponse_for_AdminUserResponse_and_ActiveFilters_and_int64: {
            data: components["schemas"]["AdminUserResponse"][];
            metadata: components["schemas"]["PaginatorMetadata_for_ActiveFilters_and_int64"];
        };
        PaginatorResponse_for_GameActionResponse_and_ListGameActionsQuery_and_int64: {
            data: components["schemas"]["GameActionResponse"][];
            metadata: components["schemas"]["PaginatorMetadata_for_ListGameActionsQuery_and_int64"];
        };
        PaginatorResponse_for_GameProviderResponse_and_null_and_int64: {
            data: components["schemas"]["GameProviderResponse"][];
            metadata: components["schemas"]["PaginatorMetadata_for_null_and_int64"];
        };
        PaginatorResponse_for_GameResponse_and_GameCategoryListQuery_and_int64: {
            data: components["schemas"]["GameResponse"][];
            metadata: components["schemas"]["PaginatorMetadata_for_GameCategoryListQuery_and_int64"];
        };
        PaginatorResponse_for_GameResponse_and_ListGameQuery_and_int64: {
            data: components["schemas"]["GameResponse"][];
            metadata: components["schemas"]["PaginatorMetadata_for_ListGameQuery_and_int64"];
        };
        PaginatorResponse_for_NotificationResponse_and_ListNotificationsQuery_and_int64: {
            data: components["schemas"]["NotificationResponse"][];
            metadata: components["schemas"]["PaginatorMetadata_for_ListNotificationsQuery_and_int64"];
        };
        PaginatorResponse_for_PaymentFlowResponse_and_ListPaymentFlowsQuery_and_int64: {
            data: components["schemas"]["PaymentFlowResponse"][];
            metadata: components["schemas"]["PaginatorMetadata_for_ListPaymentFlowsQuery_and_int64"];
        };
        PaginatorResponse_for_ScoredSearchResponseItem_for_SearchGameProviderResponse_and_SearchQuery_and_Nullable_uint: {
            data: components["schemas"]["ScoredSearchResponseItem_for_SearchGameProviderResponse"][];
            metadata: components["schemas"]["PaginatorMetadata_for_SearchQuery_and_Nullable_uint"];
        };
        PaginatorResponse_for_ScoredSearchResponseItem_for_SearchGameResponse_and_SearchQuery_and_Nullable_uint: {
            data: components["schemas"]["ScoredSearchResponseItem_for_SearchGameResponse"][];
            metadata: components["schemas"]["PaginatorMetadata_for_SearchQuery_and_Nullable_uint"];
        };
        PaginatorResponse_for_SessionResponse_and_ActiveFilters_and_int64: {
            data: components["schemas"]["SessionResponse"][];
            metadata: components["schemas"]["PaginatorMetadata_for_ActiveFilters_and_int64"];
        };
        PaginatorSelection: {
            /**
             * Format: uint64
             * @default 20
             */
            limit: number;
            /**
             * Format: uint64
             * @default 0
             */
            offset: number;
        };
        PatchPaymentLimitsParams: {
            currency: components["schemas"]["Currency"];
        };
        PatchSignupFlowRequest: {
            [key: string]: unknown;
        };
        PatchUserAddressRequest: {
            /** @description The address of the user. */
            address_lines: string[];
            /** @description The administrative area of the user, such as the state or province. */
            administrative_area?: string | null;
            /** @description The country of the user. */
            country: components["schemas"]["Country"];
            /** @description The formatted address of the user. Only use this if the address can not
             *      be represented by the other fields. */
            formatted_address?: string | null;
            /** @description The city or town of the user. */
            locality?: string | null;
            /** @description The postal code of the user. */
            postal_code?: string | null;
        };
        PatchUserConsentSettingsRequest: {
            email?: components["schemas"]["Maybe_boolean"];
            post_mail?: components["schemas"]["Maybe_boolean"];
            push_notification?: components["schemas"]["Maybe_boolean"];
            site_notification?: components["schemas"]["Maybe_boolean"];
            sms?: components["schemas"]["Maybe_boolean"];
            telephone?: components["schemas"]["Maybe_boolean"];
        };
        PatchUserPasswordRequest: {
            /** @description The current password of the user. This is required to ensure that the
             *      user is the one making the request. */
            current_password: string;
            /** @description The new password of the user. */
            new_password: string;
        };
        PatchUserPaymentSettingsRequest: {
            /** Format: email */
            pix_key_email?: components["schemas"]["Maybe_string"];
            pix_key_evp?: components["schemas"]["Maybe_string"];
            pix_key_phone?: components["schemas"]["Maybe_string"];
            pix_key_type?: components["schemas"]["Maybe_PixKeyTypeDiscriminants"];
        };
        PatchUserSettingsRequest: {
            consents: components["schemas"]["PatchUserConsentSettingsRequest"];
            locale?: components["schemas"]["Maybe_string"];
            payment: components["schemas"]["PatchUserPaymentSettingsRequest"];
            time_zone?: components["schemas"]["Maybe_string"];
        };
        PatchUserWalletLimitsParams: {
            wallet_id: components["schemas"]["WalletId"];
        };
        PatchUsernameRequest: {
            /** @description The new username of the user. */
            username: string;
        };
        PathParams: {
            user_id: components["schemas"]["UserId"];
        };
        PathParams2: {
            flow_id: components["schemas"]["PaymentFlowId"];
        };
        /**
         * Format: int64
         * @example 1
         */
        PaymentFlowId: number;
        PaymentFlowParams: {
            /** @description The ID of the payment flow. */
            flow_id: components["schemas"]["PaymentFlowId"];
        };
        PaymentFlowResponse: {
            /** @description The amount of the payment flow. */
            amount: components["schemas"]["SystemAmount"];
            /**
             * Format: date-time
             * @description The time the payment flow was created.
             */
            created_at: string;
            /** @description The currency of the payment flow. */
            currency: components["schemas"]["Currency"];
            /** @description The ID of the payment flow. */
            id: components["schemas"]["PaymentFlowId"];
            /** @description The payment method ID the payment flow is associated with. */
            payment_method_id: components["schemas"]["PaymentMethodId"];
            /** @description The type of the payment flow. */
            payment_type: components["schemas"]["PaymentType"];
            /** @description The last status of the payment flow. If no status is set, the payment
             *      has been initialized but not yet processed by the system in any way. */
            status?: components["schemas"]["PaymentStatus"] | null;
            /**
             * Format: date-time
             * @description The time the payment flo
             */
            status_updated_at?: string | null;
            /** @description The wallet ID the payment flow is associated with. */
            wallet_id: components["schemas"]["WalletId"];
        };
        PaymentFlowStatusCounts: {
            /** Format: int64 */
            failed: number;
            /** Format: int64 */
            initiated: number;
            /** Format: int64 */
            processing: number;
            /** Format: int64 */
            refunded: number;
            /** Format: int64 */
            rejected: number;
            /** Format: int64 */
            succeeded: number;
            /** Format: int64 */
            total: number;
            /** Format: int64 */
            waiting_for_approval: number;
        };
        PaymentFlowStatusCountsResponse: {
            /**
             * Format: int64
             * @description Failed payment flows
             */
            failed: number;
            /**
             * Format: int64
             * @description Initiated payment flows
             */
            initiated: number;
            /**
             * Format: int64
             * @description Processing payment flows
             */
            processing: number;
            /**
             * Format: int64
             * @description Refunded payment flows
             */
            refunded: number;
            /**
             * Format: int64
             * @description Rejected payment flows
             */
            rejected: number;
            /**
             * Format: int64
             * @description Succeeded payment flows
             */
            succeeded: number;
            /**
             * Format: int64
             * @description Total payment flows
             */
            total: number;
            /**
             * Format: int64
             * @description Waiting for approval payment flows
             */
            waiting_for_approval: number;
        };
        /**
         * Format: int64
         * @example 1
         */
        PaymentId: number;
        /** @enum {string} */
        PaymentLimitBound: "min" | "max";
        PaymentLimitsQuery: {
            /** @description The currency to get the payment limits for. */
            currency: components["schemas"]["Currency"];
            /** @description The payment method to get the payment limits for. */
            payment_method_id: components["schemas"]["PaymentMethodId"];
        };
        PaymentLimitsResponse: {
            /** @description The number of seconds a user has to wait between deposits. */
            deposit_cooldown?: components["schemas"]["DurationSeconds"] | null;
            /** @description The maximum deposit amount. This already accounts for first time
             *      deposit limits. */
            deposit_max?: components["schemas"]["SystemAmount"] | null;
            /** @description The minimum deposit amount. This already accounts for first time
             *      deposit limits. */
            deposit_min?: components["schemas"]["SystemAmount"] | null;
            /** @description Timeframe limits enforce that a user does not exceed payment limits over
             *      a certain timeframe. This can be used to enforce daily, weekly, monthly
             *      limits, etc. */
            timeframe_limits: components["schemas"]["PaymentLimitsTimeframeResponse"][];
            /** @description The number of seconds a user has to wait between withdrawals. */
            withdrawal_cooldown?: components["schemas"]["DurationSeconds"] | null;
            /** @description The maximum withdrawal amount. This already accounts for first time
             *      withdrawal limits. */
            withdrawal_max?: components["schemas"]["SystemAmount"] | null;
            /** @description The minimum withdrawal amount. This already accounts for first time
             *      withdrawal limits. */
            withdrawal_min?: components["schemas"]["SystemAmount"] | null;
        };
        PaymentLimitsTimeframeResponse: {
            /**
             * Format: int64
             * @description The number of days the timeframe limit applies to.
             */
            days: number;
            /** @description The deposit limit for the timeframe. */
            deposit?: components["schemas"]["SystemAmount"] | null;
            /** @description The withdrawal limit for the timeframe. */
            withdrawal?: components["schemas"]["SystemAmount"] | null;
        };
        /**
         * Format: int64
         * @example 1
         */
        PaymentMethodId: number;
        /** @enum {string} */
        PaymentMethodIdentifier: "pix";
        PaymentMethodResponse: {
            /** @description A non-internationalized description of the payment method. This should
             *      not be used for display purposes, as it may not be localized. Handle
             *      i18n via custom translation through the identifier attribute. */
            description?: string | null;
            /** @description The ID of the payment method. */
            id: components["schemas"]["PaymentMethodId"];
            /** @description The identifier of the payment method. This is a unique identifier that
             *      can be used to reference the payment method. */
            identifier: components["schemas"]["PaymentMethodIdentifier"];
            /** @description The name of the payment method. Do not use this for identification
             *      purposes, as names may not be unique as there may be multiple payment
             *      methods with the same name but different countries or currencies. */
            name: string;
            /** @description The type of the payment method, which can be used to determine how the
             *      payment method can be used and how it may be displayed to the user. */
            payment_method_type: components["schemas"]["PaymentMethodType"];
        };
        PaymentMethodType: "card" | "bank_transfer" | "direct_debit" | "bank_redirect" | "e_wallet" | "mobile_payment" | "buy_now_pay_later" | "cash_payment" | "cryptocurrency" | "carrier_billing" | "cheque" | "invoice" | "loyalty_points" | "voucher" | "qr_code_payment" | "nfc_payment" | "money_order" | "regional";
        /** @enum {string} */
        PaymentStatus: "initiated" | "waiting_for_approval" | "approved" | "processing" | "succeeded" | "failed" | "rejected" | "refunded" | "expired";
        PaymentTransactionRequest: {
            /** @description The amount of the payment transaction. */
            amount: components["schemas"]["SystemAmount"];
            /** @description The currency of the payment transaction. */
            currency: components["schemas"]["Currency"];
            /** @description The payment method ID to use for the payment transaction. */
            payment_method_id: components["schemas"]["PaymentMethodId"];
        };
        /** @enum {string} */
        PaymentType: "deposit" | "withdrawal";
        PhoneNumber: {
            carrier?: string;
            code: {
                /** @enum {string} */
                source: "plus" | "idd" | "number" | "default";
                value: number;
            };
            extension?: string;
            national: {
                value: number;
            };
        };
        /** @enum {string} */
        PixKeyTypeDiscriminants: "CPF" | "EMAIL" | "PHONE" | "EVP";
        ProtocolType: "welcome" | {
            error: string;
        } | "login_complete" | "login_failed" | "unauthorized" | "logout_complete" | {
            ticker_entered: {
                name: components["schemas"]["WebsocketTickerChannel"];
                /** Format: int64 */
                retention: number;
            };
        } | {
            ticker_left: components["schemas"]["WebsocketTickerChannel"];
        } | "tracker_entered" | "tracker_left";
        RateGameRequest: {
            /** @description The rating to set for the game. If `null` the rating for the current
             *      user is removed. */
            rating?: components["schemas"]["GameRating"] | null;
        };
        /** @enum {string} */
        ReadStatus: "read" | "unread";
        RejectPaymentFlowBody: {
            reason?: string | null;
        };
        /** @description The response to a game search request. It only contains a limited set of
         *      information about the game. If more information is needed, the game ID can
         *      be used to fetch the full game details via the "get game" endpoint. */
        ScoredSearchResponseItem_for_SearchGameProviderResponse: {
            /** @description The search result item. */
            item: components["schemas"]["SearchGameProviderResponse"];
            /**
             * Format: double
             * @description The search score of the item.
             */
            score?: number | null;
        };
        /** @description The response to a game search request. It only contains a limited set of
         *      information about the game. If more information is needed, the game ID can
         *      be used to fetch the full game details via the "get game" endpoint. */
        ScoredSearchResponseItem_for_SearchGameResponse: {
            /** @description The search result item. */
            item: components["schemas"]["SearchGameResponse"];
            /**
             * Format: double
             * @description The search score of the item.
             */
            score?: number | null;
        };
        /** @description The response to a game provider search request. It only contains a limited
         *      set of information about the provider. If more information is needed, the
         *      provider ID can be used to fetch the full provider details via the "get
         *      provider" endpoint. */
        SearchGameProviderResponse: {
            /** @description The slug of the game provider. This may be used in URLs. */
            identifier: components["schemas"]["GameProviderIdentifier"];
            /** @description The name of the game provider. Do not use this in URLs, as it may
             *      contain special characters. */
            name: string;
        };
        /** @description The response to a game provider search request. It only contains a limited
         *      set of information about the provider. If more information is needed, the
         *      provider ID can be used to fetch the full provider details via the "get
         *      provider" endpoint. */
        SearchGameResponse: {
            description?: string | null;
            identifier: components["schemas"]["GameIdentifier"];
            name: string;
            provider: components["schemas"]["SearchGameProviderResponse"];
        };
        SearchQuery: {
            /** @description An organic search query to find items by. */
            query?: string | null;
        };
        SelectWalletRequest: {
            /** @description The ID of the wallet to select. */
            currency: components["schemas"]["Currency"];
        };
        /** @description Represents various errors that can occur during server operations.
         *
         *      This enum covers a wide range of error scenarios, from wallet-related issues
         *      to payment processing problems, user authentication errors, and more. */
        ServerError: {
            /** @constant */
            code: "WALLET_NOT_FOUND";
        } | {
            /** @constant */
            code: "WALLET_PENDING_FLOW";
            metadata: components["schemas"]["PaymentType"];
        } | {
            /** @constant */
            code: "WALLET_MISSING_PAYMENT_METHOD";
        } | {
            /** @constant */
            code: "WALLET_INSUFFICIENT_FUNDS";
        } | {
            /** @constant */
            code: "WALLET_MISSING_DEPOSIT";
        } | {
            /** @constant */
            code: "WALLET_INSUFFICIENT_WAGERS";
        } | {
            /** @constant */
            code: "WALLET_PAYMENT_COOLDOWN";
            metadata: {
                /**
                 * Format: int64
                 * @description Minutes left until the user is allowed to make another payment
                 */
                minutes_left: number;
            };
        } | {
            /** @constant */
            code: "PAYMENT_METHOD_NOT_ALLOWED";
        } | {
            /** @constant */
            code: "PAYMENT_AMOUNT_OUTSIDE_LIMITS";
            metadata: {
                /** @description The bound that is violated */
                bound: components["schemas"]["PaymentLimitBound"];
                /** @description The maximum allowed payment amount */
                max?: string | number | null;
                /** @description The minimum allowed payment amount */
                min?: string | number | null;
            };
        } | {
            /** @constant */
            code: "GAME_LAUNCH_FAILED";
            metadata: {
                message: string;
            };
        } | {
            /** @constant */
            code: "GAME_SESSION_NOT_FOUND";
        } | {
            /** @constant */
            code: "PAYMENT_AMOUNT_EXCEEDS_TIMEFRAME_LIMITS";
            metadata: {
                /**
                 * Format: int64
                 * @description The number of past days the limit is enforced for
                 */
                days: number;
                /** @description The monetary limit that is not allowed to be exceeded */
                limit: string | number;
            };
        } | {
            /** @constant */
            code: "PAYMENT_AMOUNT_OUT_OF_BOUNDS";
        } | {
            /** @constant */
            code: "PAYMENT_FLOW_NOT_FOUND";
        } | {
            /** @constant */
            code: "PAYMENT_FLOW_INVALID_STATE";
        } | {
            /** @constant */
            code: "PAYMENT_FLOW_NOT_AWAITING_APPROVAL";
        } | {
            /** @constant */
            code: "INTEGRATION_NOT_FOUND";
        } | {
            /** @constant */
            code: "NO_PAYMENT_PROVIDER_AVAILABLE";
        } | {
            /** @constant */
            code: "PAYMENT_METHOD_NOT_FOUND";
        } | {
            /** @constant */
            code: "KYC_PROVIDER_NOT_FOUND";
        } | {
            /** @constant */
            code: "SEARCH_INDEX_NOT_FOUND";
        } | {
            /** @constant */
            code: "USER_NOT_FOUND";
        } | {
            /** @constant */
            code: "USERNAME_TAKEN";
        } | {
            /** @constant */
            code: "USERNAME_EXPLICIT";
        } | {
            /** @constant */
            code: "USER_MISSING_PAYMENT_METHOD_ACCOUNT_TYPE_IDENTIFIER";
            metadata: {
                account_type: string;
                payment_method: components["schemas"]["PaymentMethodIdentifier"];
            };
        } | {
            /** @constant */
            code: "USER_MISSING_DOCUMENT";
        } | {
            /** @constant */
            code: "USER_SANDBOXED";
        } | {
            /** @constant */
            code: "USER_INVALID_DOCUMENT";
        } | {
            /** @constant */
            code: "USER_ADDRESS_MISSING";
        } | {
            /** @constant */
            code: "USER_KYC_REQUIRED";
        } | {
            /** @constant */
            code: "USER_EXCLUDED";
        } | {
            /** @constant */
            code: "USER_BLOCKED";
        } | {
            /** @constant */
            code: "JURISDICTION_NOT_SUPPORTED_NO_ALTERNATIVE_SITE";
            metadata: {
                /** @description The violating jurisdiction. */
                jurisdiction: components["schemas"]["Country"];
            };
        } | {
            /** @constant */
            code: "JURISDICTION_NOT_SUPPORTED_ALTERNATIVE_SITE";
            metadata: {
                /** @description Alternative site that the user may be redirected to */
                alternative_site: components["schemas"]["SiteResponse"];
                /** @description The violating jurisdiction. */
                jurisdiction: components["schemas"]["Country"];
            };
        } | {
            /** @constant */
            code: "USER_ACCOUNT_JURISDICTION_MISMATCH";
            metadata: {
                /** @description The violating jurisdiction. */
                jurisdiction: components["schemas"]["Country"];
            };
        } | {
            /** @constant */
            code: "JURISDICTION_SUPPORTED_BUT_NOT_ENABLED";
            metadata: {
                /** @description The jurisdiction that is supported but not enabled. */
                jurisdiction: components["schemas"]["Country"];
            };
        } | {
            /** @constant */
            code: "HOST_NOT_SUPPORTED";
        } | {
            /** @constant */
            code: "MISSING_ORIGIN";
        } | {
            /** @constant */
            code: "GAME_NOT_FOUND";
        } | {
            /** @constant */
            code: "GAME_PROVIDER_NOT_REACHABLE";
        } | {
            /** @constant */
            code: "GAME_PROVIDER_NOT_FOUND";
        } | {
            /** @constant */
            code: "GAME_AGGREGATOR_PROVIDER_MAPPING_NOT_FOUND";
        } | {
            /** @constant */
            code: "GAME_AGGREGATOR_NOT_SUPPORTED";
        } | {
            /** @constant */
            code: "GAME_AGGREGATOR_MISSING";
        } | {
            /** @constant */
            code: "GAME_AGGREGATOR_NOT_FOUND";
        } | {
            /** @constant */
            code: "GAME_URL_INVALID";
        } | {
            /** @constant */
            code: "CHANNEL_NOT_FOUND";
        } | {
            /** @constant */
            code: "SIGNUP_FLOW_NOT_FOUND";
        } | {
            /** @constant */
            code: "SIGNUP_INVALID_PROFILE";
        } | {
            /** @constant */
            code: "EXCHANGE_RATE_NOT_FOUND";
            metadata: {
                from: components["schemas"]["Currency"];
                to: components["schemas"]["Currency"];
            };
        } | {
            /** @constant */
            code: "INVALID_SIGNATURE";
        } | {
            /** @constant */
            code: "MISSING_HEADER";
            metadata: {
                header: string;
            };
        } | {
            /** @constant */
            code: "INVALID_ENCODING";
        } | {
            /** @constant */
            code: "MISSING_SEC_WEB_SOCKET_PROTOCOL";
        } | {
            /** @constant */
            code: "INVALID_USER_GEOLOCATION";
        } | {
            /** @constant */
            code: "INVALID_BOT_HEADER";
        } | {
            /** @constant */
            code: "LEASE_NOT_FOUND";
        } | {
            /** @constant */
            code: "VALIDATION";
            metadata: components["schemas"]["SystemValidationErrors"];
        } | {
            /** @constant */
            code: "INVALID_CONTENT_TYPE";
            metadata: {
                /** @description The content type that was expected */
                expected: string;
            };
        } | {
            /** @constant */
            code: "UNAUTHORIZED";
        } | {
            /** @constant */
            code: "FORBIDDEN";
        } | {
            /** @constant */
            code: "INTERNAL";
            metadata: components["schemas"]["InternalError"];
        };
        SessionResponse: {
            country?: components["schemas"]["Country"] | null;
            /** Format: date-time */
            created_at: string;
            device?: string | null;
            /** Format: date-time */
            expires_at: string;
            id: components["schemas"]["AuthSessionId"];
            /** Format: ip */
            ip_address?: string | null;
            /** Format: date-time */
            last_interaction_at: string;
            user_agent?: string | null;
            user_id: components["schemas"]["UserId"];
        };
        SignupFlowParams: {
            /** @description The ID of the signup flow to retrieve. */
            flow_id: string;
        };
        SignupFlowResponse: {
            /**
             * Format: date-time
             * @description The time the signup flow was created.
             */
            created_at: string;
            /** @description The fields of the signup flow. */
            fields: {
                [key: string]: unknown;
            };
            /** @description The ID of the signup flow. */
            id: string;
            /** @description The jurisdiction of the signup flow. This field can not be changed once
             *      set. The user will be created in this jurisdiction and thus is subject
             *      to the laws of this jurisdiction. Changing a user jurisdiction after
             *      signup is not easily possible without additional verification,
             *      information and setup. */
            jurisdiction: components["schemas"]["Country"];
        };
        Site: {
            /** @description The ID of the site. */
            id: components["schemas"]["SiteId"];
            /** @description The identifier of the site.
             *      Use this identifier to uniquely and programmatically identify the site. */
            identifier: components["schemas"]["SiteIdentifier"];
            /** @description The name of the site. */
            name: string;
            /** @description This field indicates if this site is able to be served by the
             *      current casino instance. If there's an alternative, which can not be
             *      served by the current casino instance, but can be served by another
             *      casino instance we know of, this is false.
             *      Example scenario: Cross-regional deployments of this system, with
             *      independent databases require the ability to point to each other as
             *      alternatives, as they can't serve the requested site themselves. */
            servable: boolean;
        };
        SiteDomain: {
            /** @description The API domain of the site. */
            api: components["schemas"]["SiteDomainHost"];
            /** @description The CDN domain of the site, to be used for serving static assets. */
            cdn: components["schemas"]["SiteDomainHost"];
            /** @description The email domain of the site, to be used for contact purposes. */
            email: components["schemas"]["SiteDomainHost"];
            /** @description The frontend domain of the site. */
            frontend: components["schemas"]["SiteDomainHost"];
            /** @description The domain of the tracking service for the site. */
            tracking: components["schemas"]["SiteDomainHost"];
        };
        /** @example example.com */
        SiteDomainHost: string;
        /**
         * Format: int64
         * @example 1
         */
        SiteId: number;
        /** @example site_1234 */
        SiteIdentifier: string;
        /** @description Site setup response, used for dymainc frontend branding and configuration. */
        SiteResponse: {
            /** @description The specific domain setup serving the site. A site may have multiple domains,
             *      but only one is active for any given request. You can not get a list of all domains
             *      serving the site, as that would be a security risk. */
            domain: components["schemas"]["SiteDomain"];
            /** @description The currently active site. A system may have multiple sites, but only one is active for any
             *      given request. */
            site: components["schemas"]["Site"];
        };
        /** @enum {string} */
        StaticGameCategory: "slots" | "scratch" | "bingo" | "roulette" | "card" | "table" | "blackjack" | "dice" | "sport" | "keno" | "betting" | "casual" | "lottery" | "instantwin" | "poker" | "craps" | "crash" | "fishing" | "mines" | "video_poker" | "virtual_sports" | "live";
        /** Format: float */
        SystemAmount: number;
        SystemValidationError: {
            /** @description The error code for the validation error. This may be a well-known code
             *      like `required` or a custom code that has to be handled individually. */
            code: components["schemas"]["SystemValidationErrorCode"];
            /** @description A human-readable message describing the validation error. This should
             *      not be used for i18n purposes, as the message is intended for
             *      developers and is only available in english. */
            message?: string | null;
            /** @description Additional parameters that are relevant to the specific validation
             *      error. */
            params: {
                [key: string]: unknown;
            };
        };
        SystemValidationErrorCode: "data_error" | "syntax_error" | "io_error" | "malformed" | "credit_card" | "contains" | "does_not_contain" | "email" | "ip" | "length" | "must_match" | "non_control_character" | "range" | "regex" | "required" | "url" | "taken" | {
            custom: string;
        };
        SystemValidationErrors: {
            [key: string]: components["schemas"]["SystemValidationErrorsKind"];
        };
        SystemValidationErrorsKind: components["schemas"]["SystemValidationErrors"] | {
            [key: string]: components["schemas"]["SystemValidationErrors"];
        } | components["schemas"]["SystemValidationError"][];
        TickerChannelParams: {
            /** @description The ticker channel */
            channel: components["schemas"]["WebsocketTickerChannel"];
        };
        TickerEnterPayload: {
            /**
             * @description The replay policy for the channel. This determines whether the user will
             *      receive all messages from the channel or only those that are sent after
             *      they entered the channel.
             * @default all
             */
            replay_policy: components["schemas"]["WebsocketStreamChannelReplayPolicy"];
            /** @description The ticker channel to enter. This is a string that identifies the channel. */
            ticker_channel: components["schemas"]["WebsocketTickerChannel"];
        };
        TickerGame: {
            /** @description The identifier of the game. This is a unique string that identifies the
             *      game across all jurisdictions. */
            identifier: components["schemas"]["GameIdentifier"];
            /** @description The name of the game. Do not use this in URLs, as it may contain special
             *      characters. */
            name: string;
        };
        TickerType: {
            /** @constant */
            type: "winning_now";
            data: {
                amount: components["schemas"]["SystemAmount"];
                currency: components["schemas"]["Currency"];
                game: components["schemas"]["TickerGame"];
                user_nickname: string;
            };
        };
        TimeframeLimitPrototype: {
            /** Format: int64 */
            days: number;
            deposit?: components["schemas"]["Maybe_Decimal"];
            withdrawal?: components["schemas"]["Maybe_Decimal"];
        };
        TrackerType: {
            /** @constant */
            event: "login";
            event_data: {
                country?: components["schemas"]["Country"] | null;
                /** Format: ip */
                ip_address: string;
                user_agent?: string | null;
            };
        } | {
            /** @constant */
            event: "logout";
            event_data: {
                country?: components["schemas"]["Country"] | null;
                /** Format: ip */
                ip_address: string;
                user_agent?: string | null;
            };
        } | {
            /** @constant */
            event: "payment_update";
            event_data: {
                amount: components["schemas"]["SystemAmount"];
                currency: components["schemas"]["Currency"];
                flow_id: components["schemas"]["PaymentFlowId"];
                payment_type: components["schemas"]["PaymentType"];
                status: components["schemas"]["PaymentStatus"];
                status_counts: components["schemas"]["PaymentFlowStatusCounts"];
            };
        };
        /**
         * Format: int64
         * @example 1
         */
        UserId: number;
        UserPhysicalAddressResponse: {
            /** @description The address lines, usually containing the street address. */
            address_lines: string[];
            /** @description The administrative area of the user, e.g. state or province. */
            administrative_area?: string | null;
            /** @description The country of the user. */
            country: components["schemas"]["Country"];
            /** @description The formatted address of the user. This will only be set if the address
             *      can not be represented by the other fields. */
            formatted_address?: string | null;
            /** @description The locality of the user, e.g. city or town. */
            locality?: string | null;
            /** @description The postal code of the user. */
            postal_code?: string | null;
        };
        UserResponse: {
            /** @description The physical address of the user. */
            address?: components["schemas"]["UserPhysicalAddressResponse"] | null;
            /**
             * Format: date
             * @description The birthdate of the user.
             */
            birthdate: string;
            /** @description User associated documents */
            documents: {
                [key: string]: unknown;
            };
            /** @description The email of the user. */
            email: string;
            /** @description The family name of the user. We have methods of deriving the family name
             *      should we only get a name from e.g. a KYC provider, but they may not be
             *      100% reliable and thus the existence of this field can not be
             *      guaranteed. */
            family_name?: string | null;
            /** @description The gender of the user. */
            gender?: components["schemas"]["Gender"] | null;
            /** @description The ID of the user. */
            id: components["schemas"]["UserId"];
            /** @description The jurisdiction of the user. This field can not be easily changed once
             *      set. */
            jurisdiction: components["schemas"]["Country"];
            /** @description The locale of the user in IETF BCP 47 language tag format. */
            locale: string;
            /** @description The name of the user. */
            name: string;
            /** @description The phone number of the user. */
            phone: components["schemas"]["PhoneNumber"];
            /** @description The time zone of the user in IANA time zone format. */
            time_zone: string;
            /** @description The username of the user. */
            username: string;
        };
        UserWalletBalanceResponse: {
            /** @description The bonus balance of the wallet. This can not be withdrawn until the
             *      bonus amount gets converted to real money. */
            balance_bonus: components["schemas"]["SystemAmount"];
            /** @description The locked balance of the wallet. This can not be withdrawn until the
             *      user completes additional rollover requirements. */
            balance_locked: components["schemas"]["SystemAmount"];
            /** @description The unlocked balance of the wallet, which can be withdrawn */
            balance_unlocked: components["schemas"]["SystemAmount"];
            /** @description The currency of the wallet. */
            currency: components["schemas"]["Currency"];
            /** @description The payment method that's bound to this wallet.
             *      If the wallet has not had any deposits, this field will be unset. */
            payment_method?: components["schemas"]["UserWalletPaymentMethodResponse"] | null;
            /** @description The ID of the wallet that the balance is for. */
            wallet_id: components["schemas"]["WalletId"];
        };
        UserWalletPaymentMethodResponse: {
            /** @description The ID of the payment method. */
            id: components["schemas"]["PaymentMethodId"];
            /** @description The identifier of the payment method. Use this for matching transactions
             *      of this payment method. */
            identifier: components["schemas"]["PaymentMethodIdentifier"];
            /** @description The name of the payment method. Don't use this for display purposes as
             *      it's not localized. E.g. "Bank Transfer" is called differently in
             *      different languages. */
            name: string;
            /** @description The type of the payment method. */
            payment_method_type: components["schemas"]["PaymentMethodType"];
        };
        /**
         * Format: int64
         * @example 1
         */
        WalletId: number;
        WebsocketClientEvent: {
            /** @constant */
            type: "user_login";
            /** Format: uuid */
            data: string;
        } | {
            /** @constant */
            type: "user_logout";
        } | {
            /** @constant */
            type: "ticker_enter";
            data: components["schemas"]["TickerEnterPayload"];
        } | {
            /** @constant */
            type: "ticker_leave";
            data: components["schemas"]["WebsocketTickerChannel"];
        } | {
            /** @constant */
            type: "tracker_enter";
        } | {
            /** @constant */
            type: "tracker_leave";
        };
        WebsocketServerEvent: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            timestamp: string;
        } & ({
            /** @constant */
            type: "notification";
            data: {
                id: components["schemas"]["NotificationId"];
            } & ({
                /** @constant */
                type: "payment_status_update";
                data: {
                    flow_id: components["schemas"]["PaymentFlowId"];
                    status: components["schemas"]["PaymentStatus"];
                };
            } | {
                /** @constant */
                type: "kyc_completed";
            } | {
                /** @constant */
                type: "custom";
                data: string;
            } | {
                /** @constant */
                type: "banner";
                data: {
                    title: string;
                    /** Format: uri */
                    link?: string | null;
                    message?: string | null;
                };
            } | {
                /** @constant */
                type: "popup_modal";
                data: {
                    title: string;
                    /** Format: uri */
                    link?: string | null;
                    message: string;
                };
            });
        } | {
            /** @constant */
            type: "balance_update";
            data: {
                balance_bonus: components["schemas"]["SystemAmount"];
                balance_locked: components["schemas"]["SystemAmount"];
                balance_unlocked: components["schemas"]["SystemAmount"];
                currency: components["schemas"]["Currency"];
            };
        } | {
            /** @constant */
            type: "ticker";
            data: components["schemas"]["TickerType"];
        } | {
            /** @constant */
            type: "tracker";
            data: components["schemas"]["TrackerType"];
        } | {
            /** @constant */
            type: "protocol";
            data: components["schemas"]["ProtocolType"];
        });
        WebsocketStreamChannelReplayPolicy: "all" | "new";
        /** @enum {string} */
        WebsocketTickerChannel: "newest_wins";
        WhoamiResponse: {
            /** @description The email address of the currently authenticated user. */
            email: string;
            /** @description The user ID of the currently authenticated user. */
            id: components["schemas"]["UserId"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
