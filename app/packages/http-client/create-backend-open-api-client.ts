import createClient, { type Middleware } from "openapi-fetch";
import type { AsyncMessagePublisherI } from "../async-messages/async-message-publisher";
import type { paths } from "./girobet-backend-generated-http-client/openapi-typescript"; // generated by openapi-typescript
import { HttpBackendApiError } from "./http-client-error";
import { EmitOpenJurisdictionModalOnJurisdictionNotSupported } from "~/modules/jurisdictions/infra/ui/EmitOpenJurisdictionModalOnJurisdictionNotSupported";

const createMiddlewareJurisdictionErrorHandler: (asyncMessagePublisher: AsyncMessagePublisherI) => Middleware = (asyncMessagePublisher: AsyncMessagePublisherI) => {
  const emitOpenJurisdictionModalOnJurisdictionNotSupported = new EmitOpenJurisdictionModalOnJurisdictionNotSupported(asyncMessagePublisher);
  return {
    async onResponse({ response }) {
      /* If a CORS error happens, the response may be null or undefined */
      if (!response) {
        return;
      }

      if (response.ok || !response.headers.get("content-type")?.includes("application/json")) {
        return;
      }

      const jsonResponse: unknown = await response.clone().json();
      if (HttpBackendApiError.isBackendServerError(jsonResponse)) {
        switch (jsonResponse.code) {
          case "JURISDICTION_NOT_SUPPORTED":
            await emitOpenJurisdictionModalOnJurisdictionNotSupported.handle({ reason: "not_supported", jurisdiction: jsonResponse.metadata.jurisdiction });
            return;

          case "JURISDICTION_NOT_SUPPORTED_ALTERNATIVE_SITE":
            await emitOpenJurisdictionModalOnJurisdictionNotSupported.handle({
              reason: "alternative_site",
              jurisdiction: jsonResponse.metadata.jurisdiction,
              alternativeSite: jsonResponse.metadata.alternative_site.base_url,
            });
            return;

          case "JURISDICTION_NOT_SUPPORTED_NETWORK_CONFIGURATION":
            await emitOpenJurisdictionModalOnJurisdictionNotSupported.handle({ reason: "network_configuration", jurisdiction: jsonResponse.metadata.jurisdiction });
            return;

          default:
            return;
        }
      }
    },
  };
};

export const createBackendOpenApiClient = (clientOptions: { baseUrl: string; userJurisdiction?: string; headers?: Record<string, string> }, asyncMessagePublisher: AsyncMessagePublisherI) => {
  const client = createClient<paths>({ baseUrl: clientOptions.baseUrl, credentials: "include", headers: {
    ...(clientOptions.userJurisdiction ? { "CF-IPCountry": clientOptions.userJurisdiction } : {}),
    "Content-Type": "application/json",
    "User-Agent": "girobet-frontend",
    "X-Forwarded-Host": clientOptions.headers?.host,
    ...clientOptions.headers,
  } });
  client.use(createMiddlewareJurisdictionErrorHandler(asyncMessagePublisher));
  return client;
};
